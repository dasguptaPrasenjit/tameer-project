<?phpnamespace App\Http\Controllers\api;use App\Http\Controllers\Controller;use App\Http\Entities\Cart;use App\Http\Entities\Category;use App\Http\Entities\HomeScreenCategories;use App\Http\Entities\Product;use App\Http\Entities\Sku;use App\Http\Entities\Vendors;use App\Http\Entities\Menu;use Illuminate\Http\Request;use Illuminate\Http\Response;use Illuminate\Validation\Rule;use Validator;class ProductController extends Controller{    public $successStatus = 200;    public $internalErrorStatus = 500;    /**     * Display a listing of the resource.     * @return Response     */    public function getProductByCatId(Request $request)    {        $data = array();        $code = '';        $message = '';		$productArr = array();        try {            $request_arr = $request->all();            $category_id = $request_arr['categoryid'];            $Product = new Product();            if (sizeof($Product->getProductByCatId($category_id)) >= 1) {                $ProductData = $Product->getProductByCatId($category_id);				$i = 0;				$VendorsObj = new Vendors();				foreach($ProductData as $pro){					$productArr[$i]['product_name'] = $pro->product_name;					$productArr[$i]['product_image'] = $pro->product_image;					$productArr[$i]['manufacturer_name'] = $pro->manufacturer_name;					$productArr[$i]['category_name'] = $pro->category_name;					$productArr[$i]['product_id'] = $pro->product_id;					$productArr[$i]['category_id'] = $pro->category_id;					$productArr[$i]['manufacturer_id'] = $pro->manufacturer_id;					$productArr[$i]['parent_category_id'] = $pro->parent_category_id;					$productArr[$i]['vendor'] = $VendorsObj->getVendorBYProductId($pro->product_id);										$i++;				}				//print_r($productArr);				//print_r($ProductData);die();                $code = $this->successStatus;                $message = 'Success';            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $productArr,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Display a listing of the resource.     * @return Response     */    public function getProductDetailsByVendor(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'product_id' => 'required',                'vendor_id' => 'required',            ]);            if ($validator->fails()) {                $errors = $validator->errors();                $product_id_messages = $errors->get('productid');                $vendor_id_messages = $errors->get('vendorid');                if (!empty($product_id_messages)) {                    $response = array(                        'error' => true,                        'message' => $product_id_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }                if (!empty($vendor_id_messages)) {                    $response = array(                        'error' => true,                        'message' => $vendor_id_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }            }            $product_id = $request_arr['productid'];            $vendor_id = $request_arr['vendorid'];            // Get Product details            $Product = new Product();            $products_arr = $Product->getProductByVendorId($product_id, $vendor_id);            if (sizeof($products_arr) >= 1) {                $data['product_details'] = $products_arr;            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Display a listing of the resource.     * @return Response     */    public function getProductDetailsById(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $product_id = $request_arr['productid'];            $cart_id = isset($request_arr['cartid']) ? $request_arr['cartid'] : '';            $user_id = isset($request_arr['userid']) ? $request_arr['userid'] : '';            // Getting Cart Deatails By user Id            if ($user_id != '') {                $cart = new Cart();                $cart_arr = $cart->getCartIdByUserId($user_id);                if (!empty($cart_arr)) {                    $cart_obj = $cart_arr[0];                    $cart_id = $cart_obj->cart_id;                }            }            // Get Product details            $Product = new Product();            $cart = new cart();            $products_arr = $Product->getProductById($product_id, $cart_id);            if (sizeof($products_arr) >= 1) {                $data['product_details'] = $products_arr;                $cart_items = $cart->getAllItems($user_id, $cart_id);                if (sizeof($cart_items) >= 1) {                    $data['cart_items'] = $cart_items;                    $data_pdetails = $cart->getCartItemProcessed($cart_items, $cart_id);                    if (!$data_pdetails) {                        //$code = $this->successStatus;                        //$message = 'The cart is empty.';                    } else {                        $data['cart_item_count'] = $data_pdetails['cart_item_count'];                        $data['cart_total_amount'] = $data_pdetails['cart_total_amount'];                        // Tax Handling                        $data['tax_amount'] = $data_pdetails['tax_amount'];                        $data['total_including_tax'] = $data_pdetails['total_including_tax'];                        // Delivery Fee Handling                        $data['delivery_fee'] = $data_pdetails['delivery_fee'];                        $data['total_including_tax_delivery'] = $data_pdetails['total_including_tax_delivery'];                    }                    $code = $this->successStatus;                    $message = 'Success';                } else {                    $code = $this->successStatus;                    $message = 'The cart is empty.';                }            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Get Product Variant By Product Id     *     */    public function getProductVariantById(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $product_id = $request_arr['productid'];            // Get Product details            $Product = new Product();            $products_arr = $Product->getProductById($product_id);            $result_arr = array();            if (sizeof($products_arr) >= 1) {                $i = 0;                foreach ($products_arr as $key => $products) {                    $product_details = $products->product_description;                    $result_variant = array();                    $variants = explode(",", $product_details);                    foreach ($variants as $variant) {                        $variant_ind = explode("|", $variant);                        $result_variant[$variant_ind[0]] = $variant_ind[1];                    }                    $result_arr[$i]['sku_id'] = $products->sku_id;                    $result_arr[$i]['sku'] = $products->sku;                    $result_arr[$i]['product_identification'] = $products->product_identification;                    $result_arr[$i]['product_image'] = $products->product_image;                    $result_arr[$i]['price'] = $products->price;                    $result_arr[$i]['product_id'] = $products->product_id;                    $result_arr[$i]['product_name'] = $products->product_name;                    $result_arr[$i]['detailed_product_images'] = $products->detailed_product_images;                    $result_arr[$i]['product_description'] = $products->product_description;                    $result_arr[$i]['variant'] = $result_variant;                    $result_arr[$i]['sku_name'] = $products->sku_name;                    $result_arr[$i]['is_veg'] = $products->is_veg;                    $i++;                }                $data['product_details'] = $result_arr;            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Get Product Variant By Sku Id     *     */    public function getProductVariantBySkuId(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $sku_id = $request_arr['skuid'];            // Get Product details            $Product = new Product();            $products_arr = $Product->getProductBySkuId($sku_id);            $result_arr = array();            if (sizeof($products_arr) >= 1) {                $i = 0;                foreach ($products_arr as $key => $products) {                    $product_details = $products->product_description;                    $detailed_product_images = explode(",", $products->detailed_product_images);                    $result_variant = array();                    $variants = explode(",", $product_details);                    foreach ($variants as $variant) {                        $variant_ind = explode("|", $variant);                        $result_variant[$variant_ind[0]] = $variant_ind[1];                    }                    $total_qantity_arr = $Product->getAvailableUnitBySkuId($products->sku_id);                    $result_arr[$i]['sku_id'] = $products->sku_id;                    $result_arr[$i]['sku'] = $products->sku;                    $result_arr[$i]['product_identification'] = $products->product_identification;                    $result_arr[$i]['product_image'] = $products->product_image;                    $result_arr[$i]['price'] = $products->price;                    $result_arr[$i]['product_id'] = $products->product_id;                    $result_arr[$i]['product_name'] = $products->product_name;                    $result_arr[$i]['filenames'] = $detailed_product_images;                    $result_arr[$i]['variant'] = $result_variant;                    $result_arr[$i]['vendor_id'] = $products->vendor_id;                    $result_arr[$i]['total_available_unit'] = $total_qantity_arr[0]->total_unit;                    $i++;                }                $data = $result_arr;            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Add Product Master     *     */    public function addProductMaster(Request $request)    {        $data = array();        $code = '';        $message = '';        $productObj = new Product();        $product_table = $productObj->getTable();        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'name' => 'required|unique:' . $product_table,            ]);            if ($validator->fails()) {                $errors = $validator->errors();                $name_messages = $errors->get('name');                if (!empty($name_messages)) {                    $response = array(                        'error' => true,                        'message' => $name_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }            }            $category_id = $request_arr['categoryid'];            $vendor_id = $request_arr['vendorid'];            $name = $request_arr['name'];            $productObj->name = $name;            if ($request_arr['imageurl']) {                $product_image = $request_arr['imageurl'];                $productObj->product_image = $product_image[0];            }            $productObj->vendor_id = $vendor_id;            $productObj->category_id = $category_id;            if ($productObj->save()) {                $code = $this->successStatus;                $message = 'Success';                $response = array(                    'data' => $productObj,                    'message' => $message,                    'code' => $code,                );            }        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Edit Product Master     *     */    public function editProductMaster(Request $request)    {        $data = array();        $code = '';        $message = '';        $productObj = new Product();        $product_table = $productObj->getTable();        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'name' => 'required:' . $product_table,            ]);            if ($validator->fails()) {                $errors = $validator->errors();                $name_messages = $errors->get('name');                if (!empty($name_messages)) {                    $response = array(                        'error' => true,                        'message' => $name_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }            }            $id = $request_arr['id'];            $name = $request_arr['name'];            $productMstr = Product::find($id);            $productMstr->name = $name;            if (isset($request_arr['imageurl']) && $request_arr['imageurl']) {                $product_image = $request_arr['imageurl'];                $productMstr->product_image = $product_image[0];            }            if ($productMstr->save()) {                $code = $this->successStatus;                $message = 'Product Master Updated Successfully';                $response = array(                    'data' => $productObj,                    'message' => $message,                    'code' => $code,                );            }        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Update Product     *     */    public function updateProduct(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'skuid' => 'required',                'no_of_unit' => 'required',            ]);            if ($validator->fails()) {                $errors = $validator->errors();                $skuid_messages = $errors->get('skuid');                $unit_messages = $errors->get('on_of_unit');                if (!empty($skuid_messages)) {                    $response = array(                        'error' => true,                        'message' => $skuid_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }                if (!empty($unit_messages)) {                    $response = array(                        'error' => true,                        'message' => $unit_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }            }            $productObj = new Product();            $sku_id = $request_arr['skuid'];            $remark = isset($request_arr['remark']) ? $request_arr['remark'] : '';            $no_of_unit = $request_arr['no_of_unit'];            $filenames = $request_arr['filenames'];            $home_screen_type = array();            if (isset($request_arr['home_screen_type']) && sizeof($request_arr['home_screen_type']) >= 1) {                $home_screen_type = $request_arr['home_screen_type'];            }            $home_screen_categories_obj = new HomeScreenCategories();            if (sizeof($home_screen_type) >= 1) {                $home_screen_categories_obj::where('sku_id', $sku_id)->delete();                foreach ($home_screen_type as $screen_type) {                    $home_screen_categoriesObj = new HomeScreenCategories();                    $home_screen_categoriesObj->sku_id = $sku_id;                    $home_screen_categoriesObj->type = $screen_type;                    $home_screen_categoriesObj->save();                }            } else {                $home_screen_categories_obj::where('sku_id', $sku_id)->delete();            }            $productObj->addProductUnitQuantity($sku_id, $no_of_unit);            $productObj->updateProductDetailImage($sku_id, $filenames);            $code = $this->successStatus;            $message = 'Product updated successfully';            $response = array(                'data' => [],                'message' => $message,                'code' => $code            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Add Product     *     */    public function addProduct(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'price' => 'required',                'no_of_unit' => 'required',                'sku_name' => 'required',                'is_veg' => ['required', Rule::in([0, 1, 2, 3])],            ]);            /*            FoodTypes = [            { key: 0, value: "None" },            { key: 1, value: "Veg" },            { key: 2, value: "Non Veg" },            { key: 3, value: "Egg" }            ];             */            if ($validator->fails()) {                $errors = $validator->errors();                $price_messages = $errors->get('price');                $unit_messages = $errors->get('on_of_unit');                $sku_name = $errors->get('sku_name');                $is_veg = $errors->get('is_veg');                if (!empty($price_messages)) {                    $response = array(                        'error' => true,                        'message' => $price_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }                if (!empty($unit_messages)) {                    $response = array(                        'error' => true,                        'message' => $unit_messages[0],                        'status' => 401,                    );                    return response()->json($response);                }                if (!empty($sku_name)) {                    $response = array(                        'error' => true,                        'message' => $sku_name[0],                        'status' => 401,                    );                    return response()->json($response);                }                if (!empty($is_veg)) {                    $response = array(                        'error' => true,                        'message' => $is_veg[0],                        'status' => 401,                    );                    return response()->json($response);                }            }            $product_id = $request_arr['productid'];            $vendor_id = $request_arr['vendorid'];            $price = $request_arr['price'];            $no_of_unit = $request_arr['no_of_unit'];            $variant_arr = $request_arr['variant'];            $filenames = $request_arr['filenames'];            $sku_name = $request_arr['sku_name'];            $is_veg = $request_arr['is_veg'];            $home_screen_type = array();            if (isset($request_arr['home_screen_type']) && sizeof($request_arr['home_screen_type']) >= 1) {                $home_screen_type = $request_arr['home_screen_type'];            }            $productObj = new Product();            $product_details = $productObj->addProduct($product_id, $price, $vendor_id, $no_of_unit, $variant_arr, $filenames, $sku_name, $is_veg);            $sku_id = $product_details['skuid'];            if (isset($request_arr['home_screen_type']) && sizeof($request_arr['home_screen_type']) >= 1) {                foreach ($home_screen_type as $screen_type) {                    $home_screen_categories_obj = new HomeScreenCategories();                    $home_screen_categories_obj->sku_id = $sku_id;                    $home_screen_categories_obj->type = $screen_type;                    $home_screen_categories_obj->save();                }            }            if ($product_details) {                $code = $this->successStatus;                $message = 'Success';            }            $response = array(                'data' => $product_details,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     * Delete SKU     *     */    public function deleteProduct(Request $request)    {        $data = array();        $code = '';        $message = '';        $productObj = new Product();        $product_table = $productObj->getTable();        try {            $request_arr = $request->all();            $validator = Validator::make($request->all(), [                'id' => 'required',            ]);            if ($validator->fails()) {                return $this->error('ValidationError', $validator->errors());            }            $sku = Sku::find($request_arr['id']);            if ($sku) {                $sku->delete();                return $this->success($sku, "Deleted successfully", 200);            } else {                return $this->success($request_arr, "SKU not found", 200);            }        } catch (Exception $e) {            return $this->error('Some internal error', null, 500);        }    }    /**     * Add Product     *     */    public function productforhome(Request $request)    {        $data = new \stdClass();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $type = $request_arr['type'];            $home_screen_categories_obj = new HomeScreenCategories();            $products = $home_screen_categories_obj->getProductForHome($type);            $code = $this->successStatus;            $message = 'Success';            if (sizeof($products) >= 1) {                $data = array();                $data['products'] = $products;                if (sizeof($products) >= 1) {                    $productObj = new Product();                    $cart = new Cart();                    $user_id = isset($request_arr['userid']) ? $request_arr['userid'] : '';                    $cart_id = isset($request_arr['cartid']) ? $request_arr['cartid'] : '';                    if ($user_id != '') {                        $cart_basic = $cart->getCartIdByUserId($user_id);                        if (!empty($cart_basic)) {                            $cart_id = $cart_basic[0]->cart_id;                        }                    }                    $product_details = array();                    $i = 0;                    foreach ($products as $product) {                        $product_details[$i]['sku_id'] = $product->sku_id;                        $product_details[$i]['sku'] = $product->sku;                        $product_details[$i]['product_home_category'] = $product->product_home_category;                        $product_details[$i]['product_identification'] = $product->product_identification;                        $product_details[$i]['product_image'] = $product->product_image;                        $product_details[$i]['manufacturer_name'] = $product->manufacturer_name;                        $product_details[$i]['price'] = $product->price;                        $product_details[$i]['product_id'] = $product->product_id;                        $product_details[$i]['product_name'] = $product->product_name;                        $product_details[$i]['vendor_id'] = $product->vendor_id;                        $product_details[$i]['detailed_product_images'] = $product->detailed_product_images;                        $product_details[$i]['product_description'] = $product->product_description;                        $product_details[$i]['quantity'] = null;                        $product_details[$i]['cart_item_id'] = null;                        if ($cart_id != '') {                            $product_cart = $productObj->getProductBySkuId($product->sku_id, $cart_id);                            if (!empty($product_cart)) {                                $product_details[$i]['quantity'] = $product_cart[0]->quantity;                                $product_details[$i]['cart_item_id'] = $product_cart[0]->cart_item_id;                            }                        }                        $i++;                    }                    if (sizeof($product_details) >= 1) {                        $data = array();                        $data = $product_details;                    }                }            }            $response = array(                'data' => $data,                'message' => $message,                'code' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'code' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     *     * Get Product by Vendor     */    public function getProductByVendorId(Request $request)    {        $data = array();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $vendor_id = $request_arr['vendorid'];            $Product = new Product();            $all_products = $Product->where('vendor_id', $vendor_id)->get();            if (sizeof($all_products) >= 1) {                $data = $all_products;                $code = $this->successStatus;                $message = 'Success';            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'status' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'status' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    /**     *     * Search Product     */    public function search(Request $request)    {        $data = new \stdClass();        $code = '';        $message = '';        try {            $request_arr = $request->all();            $search_data = $request_arr['search_data'];            $Product = new Product();            $all_products = $Product->getProductBySearchData($search_data);            if (sizeof($all_products) >= 1) {                $data = array();                $data = $all_products;                $code = $this->successStatus;                $message = 'Success';            } else {                $code = $this->successStatus;                $message = 'No records founds';            }            $response = array(                'data' => $data,                'message' => $message,                'status' => $code,            );        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'status' => $internalErrorStatus,            );        }        return response()->json($response, 200);    }    public function getPoductsByCategoryVendor(Request $request)    {        $request_arr = $request->all();        $validator = Validator::make($request->all(), [            'category_id' => 'required',            'vendor_id' => 'required',        ]);        if ($validator->fails()) {            $errors = $validator->errors();            return response()->json($errors, 400);        }        try {            //$subCats = Category::select('id')->where('parent_id', $request_arr['category_id'])->pluck('id')->toArray();			$subCats = array();			$CatObj = new Category();			$categoryIdArr = $CatObj->getCategoryDetailsByVendorId($request_arr['vendor_id']);			foreach($categoryIdArr as $catList){				$subCats[] = $catList->subcategory_id;			}						// Getting Menu			$menuObj = new Menu();			$menu_arr = $menuObj->findAllMenuBySubCategoryList($subCats);			$temp_parent_id = '';						$vendorMenu = array();			$i = 0;			$data = array();			foreach($menu_arr as $key=>$value){				if($temp_parent_id != $value->parent_cat_id){										$sub_cat_arr = array();					$vendorMenu[$i] = array(										"categoryname" => $value->parent_category,										"id" => $value->parent_cat_id									);					$sub_cat_arr[] = array(										"subcategoryname" => $value->sub_category,										"id" => $value->category_id									);					$vendorMenu[$i]["subcategory"] = $sub_cat_arr;					$temp_parent_id = $value->parent_cat_id;					$i++;				}else{					$sub_cat_arr[] = array(										"subcategoryname" => $value->sub_category,										"id" => $value->category_id									);					$vendorMenu[$i-1]["subcategory"] = $sub_cat_arr;				}			}			$data['menu'] = $vendorMenu;            $relations = [                'skus' => function ($query) use ($request_arr) {                    if (!empty($request_arr['vendor_id'])) {                        $query->where('vendor_id', $request_arr['vendor_id'])->whereNull('deleted_at');                    }                },                'skus.image',                'skus.sku_variant',                'skus.sku_variant.product_variant',                'skus.sku_variant.product_variant_option',            ];            if (!empty($request_arr['cartid'])) {                $cart_id = $request_arr['cartid'];                $relations['skus.cart_item'] = function ($q) use ($cart_id) {                    $q->where('cart_id', $cart_id);                };                $cart = new Cart();                $cart_items = $cart->getAllItems("", $cart_id);                if (sizeof($cart_items) >= 1) {                    $data['cart_items'] = $cart_items;                    $data_pdetails = $cart->getCartItemProcessed($cart_items, $cart_id);                    if ($data_pdetails) {                        $data['cart_item_count'] = $data_pdetails['cart_item_count'];                        $data['cart_total_amount'] = $data_pdetails['cart_total_amount'];                        // Tax Handling                        $data['tax_amount'] = $data_pdetails['tax_amount'];                        $data['total_including_tax'] = $data_pdetails['total_including_tax'];                        // Delivery Fee Handling                        $data['delivery_fee'] = $data_pdetails['delivery_fee'];                        $data['total_including_tax_delivery'] = $data_pdetails['total_including_tax_delivery'];                    }                }            }            $product_details = Product::whereIn('category_id', $subCats)                ->with($relations)                ->get();            $data['product_details'] = [];            foreach ($product_details as $idx => $item) {                if (count($item->skus) > 0) {                    array_push($data['product_details'], $item);                }            }            return response()->json([                'data' => $data,                'status' => $this->successStatus,            ], 200);        } catch (Exception $e) {            $response = array(                'message' => 'Some internal error. Try after sometime.',                'status' => $internalErrorStatus,            );            return response()->json($response, 400);        }    }		public function productMasterDelete(Request $request){		$request_arr = $request->all();		try {			$product_id = $request_arr['productid'];			$productObj = new Product();			if($product_id != ''){				$productObj->where('id', $product_id)->update(['is_active' => 0]);				$response = array(					'message' => "Product deleted successfully",					'status' => $this->successStatus,				);				return response()->json($response, 200);			}else{				$response = array(					'message' => "Problem with deletion.",					'status' => $this->successStatus,				);					return response()->json($response, 200);			}				} catch (Exception $e) {			$response = array(				'message' => 'Some internal error. Try after sometime.', 				'status' => $this->internalErrorStatus, 			);            			return response()->json($response, 400);        		}		}}